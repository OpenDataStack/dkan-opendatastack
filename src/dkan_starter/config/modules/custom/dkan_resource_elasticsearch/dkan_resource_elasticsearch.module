<?php

/**
 * Implements hook_node_insert().
 */
function dkan_resource_elasticsearch_node_insert($node)
{
    if ($node->type == 'resource') {
        $nodeTitle = "<i>" . $node->title . "</i>";
        // output success message only if Elastic_schema field has a schema
        $field = field_get_items('node', $node, 'field_elastic_schema');
        if ($field) {
            drupal_set_message(t('The resource ' . $nodeTitle . ' has a schema.'), 'status');
        } else {
            drupal_set_message(t("Field elastic_schema doesn't have a schema"), 'error');
        }
        //drupal_set_message(t("Resource ' . $nodeTitle . ' has been created!"), "status");
    } else {
        drupal_set_message(t("I'm not a Resource!"), "error");
    }
}

/**
 * Implements hook_node_update().
 */
function dkan_resource_elasticsearch_node_update($node)
{
    $nodeTitle = "<i>" . $node->title . "</i>";
    //drupal_set_message(t('The resource ' . $nodeTitle . ' has been UPDATED.'), 'status');
    // output success message only if Elastic_schema field has a schema
    $field = field_get_items('node', $node, 'field_elastic_schema');

    if ($field) {
        drupal_set_message(t('The resource ' . $nodeTitle . ' has a schema.'), 'status');
    } else {
        drupal_set_message(t("Field elastic_schema doesn't have a schema"), 'error');
    }
}

/**
 * Implements hook_node_delete().
 */
function dkan_resource_elasticsearch_node_delete($node)
{
    $nodeTitle = "<i>" . $node->title . "</i>";
    drupal_set_message(t('The resource ' . $nodeTitle . ' has been DELETED.'), 'status');
}

/**
 * Implements hook_permission().
 */
function dkan_resource_elasticsearch_permission()
{
    return array(
        "administer logstash" => array(
            "title" => t('Administer logstash'),
            "description" => t("Perform administrative tasks on logstash functionnality"),
        ),
    );
}

/**
 * Implements hook_menu().
 */
function dkan_resource_elasticsearch_menu()
{
    $items = array();

    $items['node/%/resource_stash'] = [
        'title' => 'Elastic Search logs',
        'description' => 'Display ElasticSearch logs.',
        'page callback' => 'elasticsearch_log_page',
        'page arguments' => [1],
        'access callback' => 'elasticsearch_log_access_tab',
        'access arguments' => [1],
        'type' => MENU_LOCAL_TASK,
        'weight' => 100,
    ];

    return $items;
}

/**
 * Callback for 'node/%/feedback'.
 */
function elasticsearch_log_page($nid = NULL)
{
    return 'Hello world';
}

/**
 * Access callback function for "Add Feedback" menu tab.
 */
function elasticsearch_log_access_tab($nid)
{
    $types_allowed = array(
        'resource',
    );

    $node = node_load($nid);

    if (!empty($node)) {
        return in_array($node->type, $types_allowed);
    }

    // Default behaviour: hide the menu.
    return FALSE;
}

/**
 * Implements hook_field_default_field_bases_alter().
 */
function dkan_dataset_content_types_field_default_field_bases_alter(&$field_bases){
    if (!isset($field_bases['field_elastic_schema'])) {
        // Exported field_base: 'field_elastic_schema'.
        $field_bases['field_elastic_schema'] = array(
            'active' => 1,
            'cardinality' => 1,
            'deleted' => 0,
            'entity_types' => array(),
            'field_name' => 'field_elastic_schema',
            'indexes' => array(),
            'locked' => 0,
            'module' => 'jsonb',
            'settings' => array(),
            'translatable' => 0,
            'type' => 'jsonb',
        );
    }
}

/**
 * Implements hook_field_default_field_instances_alter().
 */
function dkan_dataset_content_types_field_default_field_instances_alter(&$field_instances)
{
    if (!isset($field_instances['node-dataset-field_elastic_schema'])) {
        // Exported field_instance: 'node-dataset-field_elastic_schema'.
        $field_instances['node-dataset-field_elastic_schema'] = array(
            'bundle' => 'dataset',
            'default_value' => NULL,
            'deleted' => 0,
            'description' => '',
            'display' => array(
                'default' => array(
                    'label' => 'above',
                    'module' => 'jsonb',
                    'settings' => array(),
                    'type' => 'jsonb_text',
                    'weight' => 27,
                ),
                'search_result' => array(
                    'label' => 'above',
                    'settings' => array(),
                    'type' => 'hidden',
                    'weight' => 0,
                ),
                'teaser' => array(
                    'label' => 'above',
                    'settings' => array(),
                    'type' => 'hidden',
                    'weight' => 0,
                ),
            ),
            'entity_type' => 'node',
            'field_name' => 'field_elastic_schema',
            'label' => 'Elastic Schema',
            'required' => 0,
            'settings' => array(
                'user_register_form' => FALSE,
            ),
            'widget' => array(
                'active' => 1,
                'module' => 'jsonb',
                'settings' => array(
                    'ui_edit' => 'allow',
                ),
                'type' => 'jsonb_textarea',
                'weight' => 33,
            ),
        );
    }
    }